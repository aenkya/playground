---
- name: Install Nginx and Certbot
  apt:
    name:
      - certbot
      - python3-certbot-nginx
      - nginx
    state: present
    update_cache: yes

- name: Create SSL directory
  file:
    path: /etc/nginx/ssl
    state: directory
    mode: '0755'

- name: Configure Nginx as a load balancer
  template:
    src: nginx.conf.j2
    dest: /etc/nginx/sites-available/{{ domain_name }}
  vars:
    domain_name: "{{ subdomain }}.{{ domain }}"
    app_server_ip: "{{ hostvars[groups['app'][0]]['ansible_host'] }}"
    backend_port: 8080
    frontend_port: 3000

- name: Enable Nginx site
  file:
    src: /etc/nginx/sites-available/{{ domain_name }}
    dest: /etc/nginx/sites-enabled/{{ domain_name }}
    state: link
  vars:
    domain_name: "{{ subdomain }}.{{ domain }}"

- name: Remove default Nginx site
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent

- name: Ensure Nginx is started
  service:
    name: nginx
    state: started
    enabled: yes

- name: Stop Nginx temporarily for cert obtainment
  service:
    name: nginx
    state: stopped

- name: Obtain SSL certificate
  command: >
    certbot certonly --standalone
    -d {{ subdomain }}.{{ domain }}
    --email {{ certbot_email }}
    --agree-tos
    --non-interactive
    --keep-until-expiring
  register: certbot_result
  vars:
    domain_name: "{{ subdomain }}.{{ domain }}"

- name: Create symbolic links for certificates
  file:
    src: "/etc/letsencrypt/live/{{ subdomain }}.{{ domain }}/{{ item.src }}"
    dest: "/etc/nginx/ssl/{{ item.dest }}"
    state: link
    force: yes
  loop:
    - { src: 'fullchain.pem', dest: 'cert.pem' }
    - { src: 'privkey.pem', dest: 'key.pem' }

- name: Start Nginx after cert obtainment
  service:
    name: nginx
    state: started

- name: Add Certbot renewal cron job
  cron:
    name: "Certbot Renewal"
    job: "certbot renew --quiet --no-self-upgrade"
    special_time: daily
